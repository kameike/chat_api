// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Chatroom チャットルームを取得するときに出てくるやつ
// swagger:model chatroom
type Chatroom struct {

	// id
	ID string `json:"id,omitempty"`

	// participants
	Participants []*User `json:"participants"`

	// 最大3件メッセージがあればpeekします。
	PeekedChat []*Chat `json:"peekedChat"`

	// unreads
	Unreads []*ChatroomUnreadsItems0 `json:"unreads"`
}

// Validate validates this chatroom
func (m *Chatroom) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeekedChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnreads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chatroom) validateParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {
		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {
			if err := m.Participants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("participants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chatroom) validatePeekedChat(formats strfmt.Registry) error {

	if swag.IsZero(m.PeekedChat) { // not required
		return nil
	}

	for i := 0; i < len(m.PeekedChat); i++ {
		if swag.IsZero(m.PeekedChat[i]) { // not required
			continue
		}

		if m.PeekedChat[i] != nil {
			if err := m.PeekedChat[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peekedChat" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chatroom) validateUnreads(formats strfmt.Registry) error {

	if swag.IsZero(m.Unreads) { // not required
		return nil
	}

	for i := 0; i < len(m.Unreads); i++ {
		if swag.IsZero(m.Unreads[i]) { // not required
			continue
		}

		if m.Unreads[i] != nil {
			if err := m.Unreads[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unreads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Chatroom) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chatroom) UnmarshalBinary(b []byte) error {
	var res Chatroom
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChatroomUnreadsItems0 chatroom unreads items0
// swagger:model ChatroomUnreadsItems0
type ChatroomUnreadsItems0 struct {

	// unread count
	UnreadCount int64 `json:"unreadCount,omitempty"`

	// user hash
	UserHash string `json:"userHash,omitempty"`
}

// Validate validates this chatroom unreads items0
func (m *ChatroomUnreadsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChatroomUnreadsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatroomUnreadsItems0) UnmarshalBinary(b []byte) error {
	var res ChatroomUnreadsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
