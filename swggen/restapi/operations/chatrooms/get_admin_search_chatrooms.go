// Code generated by go-swagger; DO NOT EDIT.

package chatrooms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	apimodel "github.com/kameike/chat_api/swggen/apimodel"
)

// GetAdminSearchChatroomsHandlerFunc turns a function with the right signature into a get admin search chatrooms handler
type GetAdminSearchChatroomsHandlerFunc func(GetAdminSearchChatroomsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAdminSearchChatroomsHandlerFunc) Handle(params GetAdminSearchChatroomsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAdminSearchChatroomsHandler interface for that can handle valid get admin search chatrooms params
type GetAdminSearchChatroomsHandler interface {
	Handle(GetAdminSearchChatroomsParams, interface{}) middleware.Responder
}

// NewGetAdminSearchChatrooms creates a new http.Handler for the get admin search chatrooms operation
func NewGetAdminSearchChatrooms(ctx *middleware.Context, handler GetAdminSearchChatroomsHandler) *GetAdminSearchChatrooms {
	return &GetAdminSearchChatrooms{Context: ctx, Handler: handler}
}

/*GetAdminSearchChatrooms swagger:route GET /admin/search/chatrooms chatrooms getAdminSearchChatrooms

アドミンがユーザーのhashを使ってチャットルームを取ってくるためのやつ

accountHashとchannelNameが指定されなかった場合、全部のchatroomsを返します。

*/
type GetAdminSearchChatrooms struct {
	Context *middleware.Context
	Handler GetAdminSearchChatroomsHandler
}

func (o *GetAdminSearchChatrooms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAdminSearchChatroomsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAdminSearchChatroomsOKBody get admin search chatrooms o k body
// swagger:model GetAdminSearchChatroomsOKBody
type GetAdminSearchChatroomsOKBody struct {

	// chatrooms
	Chatrooms []*apimodel.Chatroom `json:"chatrooms"`
}

// Validate validates this get admin search chatrooms o k body
func (o *GetAdminSearchChatroomsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatrooms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdminSearchChatroomsOKBody) validateChatrooms(formats strfmt.Registry) error {

	if swag.IsZero(o.Chatrooms) { // not required
		return nil
	}

	for i := 0; i < len(o.Chatrooms); i++ {
		if swag.IsZero(o.Chatrooms[i]) { // not required
			continue
		}

		if o.Chatrooms[i] != nil {
			if err := o.Chatrooms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAdminSearchChatroomsOK" + "." + "chatrooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAdminSearchChatroomsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdminSearchChatroomsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAdminSearchChatroomsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
