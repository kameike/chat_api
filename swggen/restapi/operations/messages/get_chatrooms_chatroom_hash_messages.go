// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetChatroomsChatroomHashMessagesHandlerFunc turns a function with the right signature into a get chatrooms chatroom hash messages handler
type GetChatroomsChatroomHashMessagesHandlerFunc func(GetChatroomsChatroomHashMessagesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChatroomsChatroomHashMessagesHandlerFunc) Handle(params GetChatroomsChatroomHashMessagesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetChatroomsChatroomHashMessagesHandler interface for that can handle valid get chatrooms chatroom hash messages params
type GetChatroomsChatroomHashMessagesHandler interface {
	Handle(GetChatroomsChatroomHashMessagesParams, interface{}) middleware.Responder
}

// NewGetChatroomsChatroomHashMessages creates a new http.Handler for the get chatrooms chatroom hash messages operation
func NewGetChatroomsChatroomHashMessages(ctx *middleware.Context, handler GetChatroomsChatroomHashMessagesHandler) *GetChatroomsChatroomHashMessages {
	return &GetChatroomsChatroomHashMessages{Context: ctx, Handler: handler}
}

/*GetChatroomsChatroomHashMessages swagger:route GET /chatrooms/{chatroom_hash}/messages messages getChatroomsChatroomHashMessages

メッセージの取得

*/
type GetChatroomsChatroomHashMessages struct {
	Context *middleware.Context
	Handler GetChatroomsChatroomHashMessagesHandler
}

func (o *GetChatroomsChatroomHashMessages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChatroomsChatroomHashMessagesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
