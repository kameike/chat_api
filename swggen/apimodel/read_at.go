// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReadAt 最後に読んだ時間をユーザーごとに表示するオブジェクト
// swagger:model readAt
type ReadAt []*ReadAtItems0

// Validate validates this read at
func (m ReadAt) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ReadAtItems0 read at items0
// swagger:model ReadAtItems0
type ReadAtItems0 struct {

	// account hash
	AccountHash string `json:"accountHash,omitempty"`

	// read at
	// Format: date-time
	ReadAt strfmt.DateTime `json:"readAt,omitempty"`
}

// Validate validates this read at items0
func (m *ReadAtItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReadAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReadAtItems0) validateReadAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadAt) { // not required
		return nil
	}

	if err := validate.FormatOf("readAt", "body", "date-time", m.ReadAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReadAtItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReadAtItems0) UnmarshalBinary(b []byte) error {
	var res ReadAtItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
