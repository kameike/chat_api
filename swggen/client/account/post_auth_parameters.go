// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostAuthParams creates a new PostAuthParams object
// with the default values initialized.
func NewPostAuthParams() *PostAuthParams {
	var ()
	return &PostAuthParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAuthParamsWithTimeout creates a new PostAuthParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAuthParamsWithTimeout(timeout time.Duration) *PostAuthParams {
	var ()
	return &PostAuthParams{

		timeout: timeout,
	}
}

// NewPostAuthParamsWithContext creates a new PostAuthParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAuthParamsWithContext(ctx context.Context) *PostAuthParams {
	var ()
	return &PostAuthParams{

		Context: ctx,
	}
}

// NewPostAuthParamsWithHTTPClient creates a new PostAuthParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAuthParamsWithHTTPClient(client *http.Client) *PostAuthParams {
	var ()
	return &PostAuthParams{
		HTTPClient: client,
	}
}

/*PostAuthParams contains all the parameters to send to the API endpoint
for the post auth operation typically these are written to a http.Request
*/
type PostAuthParams struct {

	/*AuthToken
	  他のユーザーから見えないユーザーを特定するハッシュ値です。パスワードのように扱われます。アクセストークンの取得に使用します。

	*/
	AuthToken string
	/*UserHash
	  apiサーバー等から払い出されるハッシュ値です。他のユーザーから見えても大丈夫で、推測が難しいものが望ましいです。これでユーザーは一意に特定されるのでuniqである必要もあります。

	*/
	UserHash string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post auth params
func (o *PostAuthParams) WithTimeout(timeout time.Duration) *PostAuthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post auth params
func (o *PostAuthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post auth params
func (o *PostAuthParams) WithContext(ctx context.Context) *PostAuthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post auth params
func (o *PostAuthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post auth params
func (o *PostAuthParams) WithHTTPClient(client *http.Client) *PostAuthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post auth params
func (o *PostAuthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthToken adds the authToken to the post auth params
func (o *PostAuthParams) WithAuthToken(authToken string) *PostAuthParams {
	o.SetAuthToken(authToken)
	return o
}

// SetAuthToken adds the authToken to the post auth params
func (o *PostAuthParams) SetAuthToken(authToken string) {
	o.AuthToken = authToken
}

// WithUserHash adds the userHash to the post auth params
func (o *PostAuthParams) WithUserHash(userHash string) *PostAuthParams {
	o.SetUserHash(userHash)
	return o
}

// SetUserHash adds the userHash to the post auth params
func (o *PostAuthParams) SetUserHash(userHash string) {
	o.UserHash = userHash
}

// WriteToRequest writes these params to a swagger request
func (o *PostAuthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param authToken
	qrAuthToken := o.AuthToken
	qAuthToken := qrAuthToken
	if qAuthToken != "" {
		if err := r.SetQueryParam("authToken", qAuthToken); err != nil {
			return err
		}
	}

	// query param userHash
	qrUserHash := o.UserHash
	qUserHash := qrUserHash
	if qUserHash != "" {
		if err := r.SetQueryParam("userHash", qUserHash); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
