// Code generated by go-swagger; DO NOT EDIT.

package chatrooms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	apimodel "github.com/kameike/chat_api/swggen/apimodel"
)

// PostChatroomsReader is a Reader for the PostChatrooms structure.
type PostChatroomsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostChatroomsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostChatroomsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPostChatroomsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostChatroomsOK creates a PostChatroomsOK with default headers values
func NewPostChatroomsOK() *PostChatroomsOK {
	return &PostChatroomsOK{}
}

/*PostChatroomsOK handles this case with default header values.

ok
*/
type PostChatroomsOK struct {
	Payload *PostChatroomsOKBody
}

func (o *PostChatroomsOK) Error() string {
	return fmt.Sprintf("[POST /chatrooms][%d] postChatroomsOK  %+v", 200, o.Payload)
}

func (o *PostChatroomsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostChatroomsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostChatroomsForbidden creates a PostChatroomsForbidden with default headers values
func NewPostChatroomsForbidden() *PostChatroomsForbidden {
	return &PostChatroomsForbidden{}
}

/*PostChatroomsForbidden handles this case with default header values.

error
*/
type PostChatroomsForbidden struct {
	Payload *apimodel.Error
}

func (o *PostChatroomsForbidden) Error() string {
	return fmt.Sprintf("[POST /chatrooms][%d] postChatroomsForbidden  %+v", 403, o.Payload)
}

func (o *PostChatroomsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(apimodel.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostChatroomsOKBody post chatrooms o k body
swagger:model PostChatroomsOKBody
*/
type PostChatroomsOKBody struct {

	// chatrooms
	Chatrooms []*apimodel.Chatroom `json:"chatrooms"`
}

// Validate validates this post chatrooms o k body
func (o *PostChatroomsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatrooms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostChatroomsOKBody) validateChatrooms(formats strfmt.Registry) error {

	if swag.IsZero(o.Chatrooms) { // not required
		return nil
	}

	for i := 0; i < len(o.Chatrooms); i++ {
		if swag.IsZero(o.Chatrooms[i]) { // not required
			continue
		}

		if o.Chatrooms[i] != nil {
			if err := o.Chatrooms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postChatroomsOK" + "." + "chatrooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostChatroomsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChatroomsOKBody) UnmarshalBinary(b []byte) error {
	var res PostChatroomsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
